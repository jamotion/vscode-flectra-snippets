{
    "ipdb_python_debugger": {
        "prefix": "ipdb",
        "body": [
            "import ipdb; ipdb.set_trace()  # noqa",
            "$0"
        ],
        "description": "Add ipdb debugger command"
    },
    "flectra_manifest": {
        "prefix": "fman",
        "body": [
            "{",
            "\t'name': '${1}',",
            "\t'version': '${2|1.0|}',",
            "\t'summary': '${3}',",
            "\t'category': '${4}',",
            "\t'author': '${5}',",
            "\t'maintainer': '${5}',",
            "\t'website': '${6}',",
            "\t'license': '${7}',",
            "\t'contributors': [",
            "\t\t'${8}',",
            "\t],",
            "\t'depends': [",
            "\t\t'${9}',",
            "\t],",
            "\t'external_dependencies': {",
            "\t\t'python': [",
            "\t\t\t'${10}',",
            "\t\t],",
            "\t},",
            "\t'data': [",
            "\t\t'${11}',",
            "\t],",
            "\t'installable': ${12:True},",
            "\t'auto_install': ${13:False},",
            "\t'application': ${14:False},",
            "}",
            "$0"
        ],
        "description": "Create Flectra Manifest"
    },
    "flectra_new_model": {
        "prefix": "fmod",
        "body": [
            "\n\nclass ${2:${1/([a-z]+)[\\._]?/${1:/capitalize}/g}}(models.${3|Model,AbstractModel|}):",
            "\t_name = '${1:model.technical.name}'",
            "\t_description = '${4:${1/([a-z]+)([\\._]?)/${1:/capitalize}${2:+ }/g}}'",
            "$0"
        ],
        "description": "Create New Flectra Model"
    },
    "flectra_inherit_model": {
        "prefix": "fmodi",
        "body": [
            "\n\nclass ${2:${1/([a-z]+)[\\._]?/${1:/capitalize}/g}}(models.${3|Model,AbstractModel|}):",
            "\t_inherit = '${1:model.technical.name}'",
            "$0"
        ],
        "description": "Inherit Existing Flectra Model"
    },
    "flectra_new_wizard": {
        "prefix": "fwiz",
        "body": [
            "\n\nclass ${2:${1/([a-z]+)[\\._]?/${1:/capitalize}/g}}(models.TransientModel}):",
            "\t_name = '${1:model.technical.name}'",
            "\t_description = '${4:${1/([a-z]+)([\\._]?)/${1:/capitalize}${2:+ }/g}}'",
            "$0"
        ],
        "description": "Create New Flectra Wizard"
    },
    "flectra_inherit_wizard": {
        "prefix": "fwizi",
        "body": [
            "\n\nclass ${2:${1/([a-z]+)[\\._]?/${1:/capitalize}/g}}(models.TransientModel}):",
            "\t_inherit = '${1:model.technical.name}'",
            "$0"
        ],
        "description": "Inherit Existing Flectra Wizard"
    },
    "flectra_test_model": {
        "prefix": "fmodt",
        "body": [
            "\n\nclass Test${1:ModuleName}(${3|TransactionCase,SingleTransactionCase,SavepointCase,HttpCase|}):",
            "\n\tdef setUp(self):",
            "\t\tsuper(Test${1:ModuleName}, self).setUp()",
            "$0"
        ],
        "description": "Add Test Class to Flectra Model"
    },
    "flectra_field_binary": {
        "prefix": "ffbin",
        "body": [
            "${1:new_field} = fields.Binary(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Binary"
    },
    "flectra_field_boolean": {
        "prefix": "ffbool",
        "body": [
            "${1:new_field} = fields.Boolean(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Boolean"
    },
    "flectra_field_char": {
        "prefix": "ffchar",
        "body": [
            "${1:new_field} = fields.Char(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Char"
    },
    "flectra_field_date": {
        "prefix": "ffdate",
        "body": [
            "${1:new_field} = fields.Date(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Date"
    },
    "flectra_field_datetime": {
        "prefix": "fftime",
        "body": [
            "${1:new_field} = fields.Datetime(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type DateTime"
    },
    "flectra_field_float": {
        "prefix": "fffloat",
        "body": [
            "${1:new_field} = fields.Float(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Float"
    },
    "flectra_field_html": {
        "prefix": "ffhtml",
        "body": [
            "${1:new_field} = fields.Html(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type HTML"
    },
    "flectra_field_int": {
        "prefix": "ffint",
        "body": [
            "${1:new_field} = fields.Integer(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Integer"
    },
    "flectra_field_text": {
        "prefix": "fftxt",
        "body": [
            "${1:new_field} = fields.Text(string='${2}')",
            "$0"
        ],
        "description": "Add new field of type Text"
    },
    "flectra_field_selection": {
        "prefix": "ffsel",
        "body": [
            "${1:new_field} = fields.Selection(string='${2}', selection=[('${3}', '${4}'), ('${5}', '${6}'),])",
            "$0"
        ],
        "description": "Add new field of type Selection"
    },
    "flectra_field_many2one": {
        "prefix": "ffm2o",
        "body": [
            "${1:new_field} = fields.Many2one(comodel_name='${2}', string='${3}')",
            "$0"
        ],
        "description": "Add new field of type Many2one"
    },
    "flectra_field_many2many": {
        "prefix": "ffm2m",
        "body": [
            "${1:new_field} = fields.Many2many(comodel_name='${2}', string='${3}')",
            "$0"
        ],
        "description": "Add new field of type Many2many"
    },
    "flectra_field_one2many": {
        "prefix": "ffo2m",
        "body": [
            "${1:new_field} = fields.One2many(comodel_name='${2}', inverse_name='${3}', string='${4}')",
            "$0"
        ],
        "description": "Add new field of type One2many"
    },
    "flectra_method_create":{
        "prefix": "fmcreate",
        "body":[
            "@api.model",
            "def create(self, values):",
            "\t# Add code here",
            "\treturn super(${1:ClassName}, self).create(values)",
            "$0"
        ],
        "description": "Add a method create"
    },
    "flectra_method_write": {
        "prefix": "fmwrite",
        "body": [
            "@api.multi",
            "def write(self, values):",
            "\t# Add code here",
            "\treturn super(${1:ClassName}, self).write(values)",
            "$0"
        ],
        "description": "Add a method write"
    },
    "flectra_method_unlink": {
        "prefix": "fmunlink",
        "body": [
            "@api.multi",
            "def unlink(self):",
            "\t# Add code here",
            "\treturn super(${1:ClassName}, self).unlink()",
            "$0"
        ],
        "description": "Add a method unlink"
    },
    "flectra_method_compute": {
        "prefix": "fmcomp",
        "body": [
            "@api.depends('${1:field_name}')",
            "def _compute_${1:field_name}(self):",
            "\tself.${1:field_name} = ''",
            "$0"
        ],
        "description": "Add a method compute"
    },
    "flectra_method_constrains": {
        "prefix": "fmconst",
        "body": [
            "@api.constrains('${1:field_name}')",
            "def _check_${1:field_name}(self):",
            "\tif 1==1:",
            "\t\traise ValidationError()",
            "$0"
        ],
        "description": "Add a constraint method"
    },
    "flectra_method_onchange": {
        "prefix": "fmchange",
        "body": [
            "@api.onchange('${1:field_name}')",
            "def _onchange_${1:field_name}(self):",
            "\tself.${1:field_name} = ''",
            "$0"
        ],
        "description": "Add a method onchange"
    },
    "flectra_user_company": {
        "prefix": "fusercomp",
        "body": [
            "self.env.user.company_id",
            "$0"
        ],
        "description": "Get the user's company record"
    },
    "flectra_import_flectra": {
        "prefix": "fimp",
        "body": [
            "from flectra import _, api, fields, models",
            "$0"
        ],
        "description" : "Add Flectra import"
    },
    "flectra_import_flectra_test": {
        "prefix": "fimpt",
        "body": [
            "from flectra.tests.common import  ${1|TransactionCase,SingleTransactionCase,SavepointCase,HttpCase|}",
            "$0"
        ],
        "description" : "Add Import to Flectra Tests"
    },
    "flectra_import_flectra_exceptions": {
        "prefix": "fimper",
        "body": [
            "from flectra.exceptions import ${1|ValidationError,RedirectWarning,AccessDenied,AccessError,CacheMiss,MissingError,UserError|}",
            "$0"
        ],
    "description" : "Add return to Action Window Close"
    },
    "flectra_return_actwin_close": {
        "prefix": "fret_act_close",
        "body": [
            "return {'type': 'ir.actions.act_window_close'}",
            "$0"
        ],
        "description" : "Add return to Action Window Close"
    },
    "flectra_return_actwin": {
        "prefix": "fret_act_close",
        "body": [
            "return {",
                "\t'name': ('${1:model.name}.action'),",
                "\t'type': 'ir.actions.act_window',",
                "\t'res_model': '${1:model.name}',",
                "\t'view_type': 'form',",
                "\t'view_mode': '${3:tree,form}',",
                "\t'target': '${4|current,new,fullscreen,main,inline|}',",
                "\t'domain': [${5}],",
                "\t'context': {${6}},",
            "}"
        ],
        "description" : "Add return to Action Window Close"
    }
}
